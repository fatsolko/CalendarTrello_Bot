#image: golang:latest
#
#before_script:
## Гитлаб скачивает себе утилиту sshpass
#  - apt-get update -qq && apt-get install -y -qq sshpass
## Скачиваем зависимости, необходимые для сборки проекта. Можно использовать govendor, но его нужно отдельно настраивать
#  - go get github.com/gorilla/mux
#  - go get github.com/gorilla/websocket
## Настраиваем SSH
#  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
#  - eval $(ssh-agent -s)
#  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
#  - mkdir -p ~/.ssh
#  - chmod 700 ~/.ssh
#  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
## Создаем папку для репозитория
#  - mkdir -p /go/src/gitlab.com/$GROUP_NAME
## Клонируем в неё репозиторий
#  - git clone git@gitlab.com:$GROUP_NAME/$REPOSITORY_NAME.git /go/src/gitlab.com/$GROUP_NAME/$REPOSITORY_NAME
## Создаем папку под готовый билд
#  - mkdir -p $CI_PROJECT_DIR/build/
## Копирем в папку с билдом все ассеты (картинки, HTML-файлы и.т.п) из репозитория.
## У меня они лежат в папке src/public
#  - cp -r $CI_PROJECT_DIR/src/public $CI_PROJECT_DIR/build
#
#stages:
#    - build
#    - deploy
#
#compile:
#    stage: build
#    script:
## Переходим в папку с Go файлами
#    - cd /go/src/gitlab.com/$GROUP_NAME/$REPOSITORY_NAME/src
## Вызываем в ней сборку. Указываем, что готовый бинарник будет положен в папку build рядом с ассетами и будет называться main
#    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/build/main
#    artifacts:
#      paths:
#        - $CI_PROJECT_DIR/build/main
#
#deploy:
#    stage: deploy
#    script:
## Переходим в папку с билдом () там лежит бинарник и папка public
#    - cd $CI_PROJECT_DIR/build
## Используем утилиту sshpass для удаленного выполнения команд на VDS
#    - sshpass -V
#    - export SSHPASS=$USER_PASS
## Останавливаем сервис
#    - sshpass -e ssh -o stricthostkeychecking=no $USER@$HOST systemctl stop $SERVICE_NAME
## Копируем новые файлы
#    - sshpass -e scp -o stricthostkeychecking=no -r . $USER@$HOST:$TARGET_DIR_ON_HOST
## Перезапускаем сервис
#    - sshpass -e ssh -o stricthostkeychecking=no $USER@$HOST systemctl restart $SERVICE



## Use Alpine + glibc image from Docker Hub
#image: frolvlad/alpine-glibc
#
## Optionally use caching (currently it slows down instead of speeding up, so not using)
#cache:
#  key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
#  paths:
#  - workspace/.state/
#
#before_script:
## Install state tool
## We need to use the commands below due to one-line install script having dependencies (no curl in Alpine)
#  - wget https://platform.activestate.com/dl/cli/install.sh
#  - chmod +x ./install.sh
#  - ./install.sh -n -t /usr/local/bin
## Download and install the language runtime
#  - state deploy shnewto/learn-python
#test:
#  script:
## Lint code
#    - pylint src
#    - flake8 src --statistics --count
## Test code
#    - pytest
#
## This file is a template, and might need editing before it works on your project.
## To contribute improvements to CI/CD templates, please follow the Development guide at:
## https://docs.gitlab.com/ee/development/cicd/templates.html
## This specific template is located at:
## https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml
#
## Official language image. Look for the different tagged releases at:
## https://hub.docker.com/r/library/python/tags/


image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - python --version  # For debugging
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate

test:
  script:
    - python setup.py test
    - pip install tox flake8  # you can also use tox
    - tox -e py36,flake8

run:
  script:
    - python setup.py bdist_wheel
    # an alternative approach is to install and run:
    - pip install dist/*
    # run the command here
  artifacts:
    paths:
      - dist/*.whl

#pages:
#  script:
#    - pip install sphinx sphinx-rtd-theme
#    - cd doc
#    - make html
#    - mv build/html/ ../public/
#  artifacts:
#    paths:
#      - public
#  rules:
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
