image: golang:latest


before_script:
# Гитлаб скачивает себе утилиту sshpass
  - apt-get update -qq && apt-get install -y -qq sshpass
# Скачиваем зависимости, необходимые для сборки проекта. Можно использовать govendor, но его нужно отдельно настраивать
  - go get github.com/gorilla/mux
  - go get github.com/gorilla/websocket
# Настраиваем SSH
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
# Создаем папку для репозитория
  - mkdir -p /go/src/gitlab.com/$GROUP_NAME
# Клонируем в неё репозиторий
  - git clone git@gitlab.com:$GROUP_NAME/$REPOSITORY_NAME.git /go/src/gitlab.com/$GROUP_NAME/$REPOSITORY_NAME
# Создаем папку под готовый билд
  - mkdir -p $CI_PROJECT_DIR/build/
# Копирем в папку с билдом все ассеты (картинки, HTML-файлы и.т.п) из репозитория.
# У меня они лежат в папке src/public
  - cp -r $CI_PROJECT_DIR/src/public $CI_PROJECT_DIR/build

stages:
    - build
    - deploy

compile:
    stage: build
    script:
# Переходим в папку с Go файлами
    - cd /go/src/gitlab.com/$GROUP_NAME/$REPOSITORY_NAME/src
# Вызываем в ней сборку. Указываем, что готовый бинарник будет положен в папку build рядом с ассетами и будет называться main
    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/build/main
    artifacts:
      paths:
        - $CI_PROJECT_DIR/build/main

deploy:
    stage: deploy
    script:
# Переходим в папку с билдом () там лежит бинарник и папка public
    - cd $CI_PROJECT_DIR/build
# Используем утилиту sshpass для удаленного выполнения команд на VDS
    - sshpass -V
    - export SSHPASS=$USER_PASS
# Останавливаем сервис
    - sshpass -e ssh -o stricthostkeychecking=no $USER@$HOST systemctl stop $SERVICE_NAME
# Копируем новые файлы
    - sshpass -e scp -o stricthostkeychecking=no -r . $USER@$HOST:$TARGET_DIR_ON_HOST
# Перезапускаем сервис
    - sshpass -e ssh -o stricthostkeychecking=no $USER@$HOST systemctl restart $SERVICE